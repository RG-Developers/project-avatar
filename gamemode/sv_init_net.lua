util.AddNetworkString("OnTaskRuined")
util.AddNetworkString("Disconnect")
util.AddNetworkString("TaskComplete")
util.AddNetworkString("PreRound")
util.AddNetworkString("StartVote")
util.AddNetworkString("ExitPEENV")
util.AddNetworkString("openTablet")
util.AddNetworkString("BugAppeared")
util.AddNetworkString("abilityReady")
util.AddNetworkString("abilityUse")
util.AddNetworkString("TaskRuined")
util.AddNetworkString("showBugs")
util.AddNetworkString("updateBugs")
util.AddNetworkString("NewTask")
util.AddNetworkString("SetClass")
util.AddNetworkString("SetTeam")
util.AddNetworkString("RoundEnd")

net.Receive("OnTaskRuined", function() 
    OnTaskRuined(net.ReadEntity())
end)
net.Receive("Disconnect", function(_, ply)
    ply:SetHealth(100)
    ply:TakeDamage(100)
end)
net.Receive("TaskComplete", function()
    SetGlobalInt("ScientistsScore", GetGlobalInt("ScientistsScore") + 5)
end)


net.Receive("StartVote", function(_, ply)
    SetGlobalInt("StartVotes", GetGlobalInt("StartVotes") + 1)
    net.Start("StartVote")
        net.WriteInt(GetGlobalInt("StartVotes"), 8)
        net.WriteString(ply:Name())
        net.WriteInt(ply:UserID(), 16)
    net.Broadcast()
    if GetGlobalInt("StartVotes") == GetGlobalInt("ScientistsCount") then
        net.Start("ExitPEEnv")
        net.Broadcast()
    end
end)
net.Receive("SetClass", function(_, ply)
    local tester = net.ReadString()
    if not IsValid(tester) then return 0 end
    local class = net.ReadInt(3)
    tester = PlayerByName(tester)
    SetClass(tester, TEAM_TESTSUBJECTS, class)
    net.Start("SetClass")
        net.WriteInt(class, 3)
        net.WriteString(tester:Name())
    net.SendOmit(ply)
end)
net.Receive("SetTeam", function(_, ply)
    local team = net.ReadInt(4)
    local retback = net.ReadBool()
    if retback then
        local coro = coroutine.create(function(ply, etime) 
            local oldteam = ply:Team()
            while CurTime() < etime do coroutine.yield() end
            ply:SetTeam(oldteam)
        end)
        coroutine.resume(coro, ply, CurTime() + 60*5)
        coroutines[ply:EntIndex()+2000] = coro
    end
    ply:KillSilent()
    SetClass(ply, team, 0)
    ply:Spawn()
end)